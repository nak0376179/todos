# .cursorrules

## 目的

React + FastAPI + DynamoDB で TODOアプリを作成することで、開発環境や技術選定の検証をしたい。

* メールアドレスで誰でもユーザー登録ができる（テストなので検証不要）。
* ユーザーはグループをいくつでも作成できて、グループごとにtodoを管理でき、グループの管理者になる。
* グループには別のユーザーのメールアドレスを入力することでユーザーをメンバーとして招待できる。
* メンバーはユーザーを招待できない。

### インフラ

* バックエンドのDBはDynamoDBを利用すること
* 開発時は LocalStack（Docker）が別途動作しているのでそれを使用すること。
* テーブル構造とサンプルデータは https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/AppendixSampleTables.html にあわせること
* LocalStack用エンドポイントは: DYNAMODB_ENDPOINT_URL=http://localhost:4566
* AWS_REGIONは ap-northeast-1 とすること

### バックエンド

* **技術スタック**:

  * 使用技術: `FastAPI + Mangum + pydantic + boto3`
  * デプロイ: AWS SAM を使い AWS Lambda（zip形式）でデプロイ
  * 環境管理: `poetry + pyenv`

* **構成・ルール**:

  * pythonは3.11を使用すること
  * API層: `app/api`
  * リポジトリ・サービス層: `app/repositories`, `app/services`
  * スキーマ設計: `app/models`（DB/永続層）と `app/schemas`（API入出力）を分離
  * FastAPIのCORSミドルウェアは開発時はallow_origins=["*"]でOK
  * テストはpytestを使用し（日本語関数名OK）、LocalStackを使用してテストを実施すること



### フロントエンド

* **技術スタック**:

  * 使用技術: `React v18 + Vite + SWC + MUI v7 + Tanstack Query + Jotai + axios`
  * ルーティング: `react-router v7`（Declarative Mode）

* **構成・ルール**:

  * `frontend/src/components`: UIコンポーネント
  * `frontend/src/hooks/api`: APIクライアント・型・フック
  * `frontend/src/layouts`: レイアウトコンポーネント
  * `frontend/src/pages`: Next.js互換のページ構成（中身はcomponentsで実装）
  * `hooks/api/fetcher.ts` に `axios` の `baseURL` や共通ヘッダーを集約
  * `MUI` の `ThemeProvider` と `Noto Sans JP` を全体に適用

## テスト・Storybook・モック

* storybookは、`npx storybook@8 init --builder vite` で作成すること
* フロントエンドのテストは `Vitest + Testing Library + Storybook v8 + MSW v2`
* `QueryClientProvider` はテスト・Storybook 両方で必須ラップ

## Lint・整形・依存管理

* printWidth: 120
* フロントエンドはeslint, prettier, バックエンドは ruff, black, mypy を使い、VSCode保存時に整形
* フロントエンドはセミコロンなし、シングルクオート

## Makefile

* ルートにMakefileを作成する
* make dev でフロントエンドとバックエンドを同時に起動する
* make down でフロントエンドとバックエンドを停止する
* make init-db で最低限のテーブル作成とデータ注入を実施する。
* make test でテストを実施する。
* make build でバックエンドのビルドを実施する。
* make deploy でバックエンドのデプロイを実施する。
* make clean でバックエンドのビルド成果物を削除する。

## 注意点

* ディレクトリ作成は必ずプロジェクトのルートにcdしてから実施する
* poetry は cd backendが必要なことを忘れないでほしい 