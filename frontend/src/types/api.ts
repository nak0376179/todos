/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create User */
        post: operations["create_user_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User */
        get: operations["get_user_users__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Groups */
        get: operations["get_user_groups_users__user_id__groups_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Group */
        post: operations["create_group_groups_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Group */
        get: operations["get_group_groups__group_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{group_id}/todos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Todos */
        get: operations["list_todos_groups__group_id__todos_get"];
        put?: never;
        /** Create Todo */
        post: operations["create_todo_groups__group_id__todos_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{group_id}/todos/{todo_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Todo */
        get: operations["get_todo_groups__group_id__todos__todo_id__get"];
        put?: never;
        post?: never;
        /** Delete Todo */
        delete: operations["delete_todo_groups__group_id__todos__todo_id__delete"];
        options?: never;
        head?: never;
        /** Update Todo */
        patch: operations["update_todo_groups__group_id__todos__todo_id__patch"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** GroupCreateRequest */
        GroupCreateRequest: {
            /** Group Name */
            group_name: string;
            /** Owner User Id */
            owner_user_id: string;
        };
        /** GroupReadResponse */
        GroupReadResponse: {
            /**
             * Group Id
             * @description グループID（UUIDなどユニークな値）
             */
            group_id: string;
            /**
             * Group Name
             * @description グループ名
             */
            group_name: string;
            /**
             * Owner User Id
             * @description グループ作成者のユーザーID
             */
            owner_user_id: string;
            /**
             * Created At
             * @description 作成日時
             */
            created_at: string;
            /**
             * Users
             * @description グループのユーザー一覧
             */
            users?: components["schemas"]["GroupUser"][];
        };
        /** GroupUser */
        GroupUser: {
            /**
             * User Id
             * @description ユーザーID
             */
            user_id: string;
            /**
             * Email
             * @description メールアドレス
             */
            email: string;
            /**
             * User Name
             * @description 表示名
             */
            user_name: string;
            /**
             * Role
             * @description ロール（admin/member）
             */
            role: string;
            /**
             * Invited At
             * @description 招待日時
             */
            invited_at: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Todo */
        Todo: {
            /**
             * Todo Id
             * @description TODO ID（UUIDなどユニークな値）
             */
            todo_id: string;
            /**
             * Group Id
             * @description 所属グループID
             */
            group_id: string;
            /**
             * Title
             * @description タイトル
             */
            title: string;
            /**
             * Description
             * @description 説明
             */
            description?: string | null;
            /**
             * Owner User Id
             * @description 作成者ユーザーID
             */
            owner_user_id: string;
            /**
             * Due Date
             * @description 期限
             */
            due_date?: string | null;
            /**
             * Is Completed
             * @description 完了フラグ
             * @default false
             */
            is_completed: boolean;
            /**
             * Created At
             * @description 作成日時
             */
            created_at: string;
            /**
             * Updated At
             * @description 更新日時
             */
            updated_at: string | null;
        };
        /** TodoCreateRequest */
        TodoCreateRequest: {
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Due Date */
            due_date?: string | null;
            /** Owner User Id */
            owner_user_id: string;
        };
        /** TodoCreateResponse */
        TodoCreateResponse: {
            /**
             * Todo Id
             * @description TODO ID（UUIDなどユニークな値）
             */
            todo_id: string;
            /**
             * Group Id
             * @description 所属グループID
             */
            group_id: string;
            /**
             * Title
             * @description タイトル
             */
            title: string;
            /**
             * Description
             * @description 説明
             */
            description?: string | null;
            /**
             * Owner User Id
             * @description 作成者ユーザーID
             */
            owner_user_id: string;
            /**
             * Due Date
             * @description 期限
             */
            due_date?: string | null;
            /**
             * Is Completed
             * @description 完了フラグ
             * @default false
             */
            is_completed: boolean;
            /**
             * Created At
             * @description 作成日時
             */
            created_at: string;
            /**
             * Updated At
             * @description 更新日時
             */
            updated_at: string | null;
        };
        /** TodoListResponse */
        TodoListResponse: {
            /**
             * Items
             * @description 取得アイテムのリスト
             */
            Items: components["schemas"]["Todo"][];
            /**
             * Lastevaluatedkey
             * @description DynamoDBのLastEvaluatedKey。キーの辞書オブジェクト
             */
            LastEvaluatedKey?: {
                [key: string]: unknown;
            } | null;
        };
        /** TodoReadResponse */
        TodoReadResponse: {
            /**
             * Todo Id
             * @description TODO ID（UUIDなどユニークな値）
             */
            todo_id: string;
            /**
             * Group Id
             * @description 所属グループID
             */
            group_id: string;
            /**
             * Title
             * @description タイトル
             */
            title: string;
            /**
             * Description
             * @description 説明
             */
            description?: string | null;
            /**
             * Owner User Id
             * @description 作成者ユーザーID
             */
            owner_user_id: string;
            /**
             * Due Date
             * @description 期限
             */
            due_date?: string | null;
            /**
             * Is Completed
             * @description 完了フラグ
             * @default false
             */
            is_completed: boolean;
            /**
             * Created At
             * @description 作成日時
             */
            created_at: string;
            /**
             * Updated At
             * @description 更新日時
             */
            updated_at: string | null;
        };
        /** TodoUpdateRequest */
        TodoUpdateRequest: {
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Due Date */
            due_date?: string | null;
            /** Is Completed */
            is_completed?: boolean | null;
        };
        /** TodoUpdateResponse */
        TodoUpdateResponse: {
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Due Date */
            due_date?: string | null;
            /** Is Completed */
            is_completed?: boolean | null;
        };
        /** UserCreateRequest */
        UserCreateRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** User Name */
            user_name: string;
        };
        /** UserCreateResponse */
        UserCreateResponse: {
            /**
             * User Id
             * @description ユーザーID（UUIDなどユニークな値）
             */
            user_id: string;
            /**
             * Email
             * @description メールアドレス
             */
            email: string;
            /**
             * Created At
             * @description 作成日時
             */
            created_at: string;
            /**
             * User Name
             * @description 表示名
             */
            user_name?: string | null;
            /**
             * Groups
             * @description 所属グループ一覧
             */
            groups?: components["schemas"]["UserGroup"][];
        };
        /** UserGroup */
        UserGroup: {
            /**
             * Group Id
             * @description グループID
             */
            group_id: string;
            /**
             * Group Name
             * @description グループ名
             */
            group_name: string;
            /**
             * Role
             * @description ロール（admin/member）
             */
            role: string;
            /**
             * Invited At
             * @description 招待日時
             */
            invited_at: string;
        };
        /** UserReadResponse */
        UserReadResponse: {
            /**
             * User Id
             * @description ユーザーID（UUIDなどユニークな値）
             */
            user_id: string;
            /**
             * Email
             * @description メールアドレス
             */
            email: string;
            /**
             * Created At
             * @description 作成日時
             */
            created_at: string;
            /**
             * User Name
             * @description 表示名
             */
            user_name?: string | null;
            /**
             * Groups
             * @description 所属グループ一覧
             */
            groups?: components["schemas"]["UserGroup"][];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    create_user_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_groups_users__user_id__groups_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserGroup"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_group_groups_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupReadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_group_groups__group_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupReadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_todos_groups__group_id__todos_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_todo_groups__group_id__todos_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TodoCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_todo_groups__group_id__todos__todo_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: string;
                todo_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoReadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_todo_groups__group_id__todos__todo_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: string;
                todo_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_todo_groups__group_id__todos__todo_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: string;
                todo_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TodoUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoUpdateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
